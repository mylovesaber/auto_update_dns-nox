#----------------------------------
# 切换 tomcat 构建版本

## tomcat_ver
## tomcat 版本号
## 如果希望下载指定版本号的tomcat，则 tomcat_ver 的值必须和官网想要下载的真实 tomcat 二进制文件对应版本号完全相同
## 如果希望下载具体某个系列下的最新版本 tomcat，则 tomcat_ver 的值为 latest
## 如果设置 tomcat_ver 的值为 latest，则 tomcat_version_num 的值必须填写以决定下载哪个大版本号系列的最新版本 tomcat
## （不建议用任何大版本号系列中的老版本，大概率存在 CVE 漏洞导致等保评测过不了）
#tomcat_ver=latest
tomcat_ver=9.0.93

## tomcat_version_num
## tomcat 有多个系列大版本，大版本值是几，tomcat_version_num 的值就是几，比如：
## 9 系列版本号是 v9.xx.xx，那么 tomcat_version_num 的值就是 9
## 10 系列版本号是 v10.xx.xx，那么 tomcat_version_num 的值就是 10
## 如果是给 java8 使用的话无须修改，9 系列是 java8 支持的最后一个大版本系列
## 如果 tomcat_ver 的值非 latest，则此值可以留空，如果非空，则必须是具体指定的版本号对应的大版本号，例：
## tomcat_ver=9.0.91 对应 tomcat_version_num=9
## 注意：tomcat 打包没有适配 beta 版，不要用此套件为 beta 版本 tomcat 打包，会报错。
tomcat_version_num=9

## tomcat_amount
## tomcat 安装包中包含 tomcat 本体的数量
tomcat_amount=5

## tomcat_tool_path
## 定制的便于现场产品使用的tomcat辅助管理配置的脚本的绝对路径。
tomcat_tool_path=/home/build/test/tomcat-tool.sh

#----------------------------------
# 用户信息

## tomcat_user
## tomcat运行时所用用户名，本例中有两种 tomcat 的用户名，[root] 和 [非root] 用户，非root 用户名请自行定义，两种用户配置方式只能使用其中一种。
tomcat_user=tomcat-project
#tomcat_user=root

#----------------------------------
# 厂商信息

## vendor_en
## 厂商英文名，该名称会作为部署路径的一个文件夹名和包名的组成之一，假设名称为 <project>
## 注意：本打包套件制作出来的安装包，以上面参数为例，默认安装路径为: /opt/project。
## /opt 是个魔法值，因为各种国产软件均喜欢把非系统安装包装到 /opt 下自定义的一个文件夹中，麒麟和统信公司就是典型。
vendor_en=project

## vendor_cn
## 厂商中文名，该名称会出现在安装包的各种部署文件的中文详情中。假设名称为 <项目>
vendor_cn=项目

#----------------------------------
# 构建信息

## topdir
## 构建环境的根目录对应的绝对路径，例：/home/build/rpmbuild
topdir=/home/build/test/env

## spec_name
## rpm 打包专用的 spec 文件名，例：tomcat.spec
spec_name=tomcat.spec

#----------------------------------
# java 信息

## java_home
## java的安装路径，如果使用本配置文件的示例值，则java程序的绝对路径是: ${java_home}/bin/java
## 此路径必须是未来生产环境中所用的 JAVA_HOME，否则无法启动 tomcat
java_home=/opt/project/java-8

## java_package_name
## java的安装包名称，只出现在spec文件中，允许为空，即不指定必须安装某个包名的jre也能安装成功。
java_package_name=
#java_package_name=oracle-jdk8-project
#java_package_name=microsoft-jdk8-project

#----------------------------------
# systemd 资源限制信息

## systemd_limit_conf
## systemd 资源限制信息列表，只能用数组写法，无论是一种还是多种限制配置用，例：
## 多种配置：(LimitNOFILE=infinity TasksMax=infinity)
## 一种配置：(LimitNOFILE=infinity)
## 每个配置最好用双引号括起来，例："LimitNOFILE=infinity"，不括理论上可以，但有很小概率可能因为写法太非常规会解析异常。
## 更多参数请查看参考链接：
## https://www.freedesktop.org/software/systemd/man/latest/systemd.exec.html#Process%20Properties
## https://www.freedesktop.org/software/systemd/man/latest/systemd.resource-control.html#
#systemd_limit_conf=()
# systemd_limit_conf=(LimitNOFILE=infinity)
systemd_limit_conf=(LimitNOFILE=infinity TasksMax=infinity)

#----------------------------------
# clash 代理开关
## 因 tomcat 官网获取信息和下载文件对于国内网络来说连接不了或连接过慢，所以加了这个功能。
## 本套件只适配并测试了以下情况的虚拟机中走 clash 代理:
## - vmware workstation pro NAT和桥接
## - WSL2 默认 NAT
## 本配置实现类似 127.0.0.1:7890 且无账号密码的配置，非 clash 用户请自行修改对应端口号或提交其他软件的适配方案。

## proxy_enable
## 1 表示开启，即调用本构建套件内建代理功能
## 0 表示跳过本套件内建代理功能，即后续联网功能是否走代理与本套件无关
## 此构建套件运行时一定会走代理配置流程，但会根据 proxy_enable 的值来决定是否将代理流程配置置空，不会实际安装到系统环境变量中。
## 此值如果为 0，则后面 proxy_ip 和 proxy_port 无效
proxy_enable=1

## proxy_ip 和 proxy_port
## proxy_ip 默认值: 本工具自动检测虚拟机所在网络的转发 IP
## proxy_port 默认值: 7890，也就是 clash 默认的代理端口
## 二者任意一项被人工指定了值，则会覆盖默认值
##
## 如果是虚拟机的 NAT 联网，proxy_ip 可以为空
##
## 如果是【虚拟机的桥接】、【同网段实体机之间】、【本机】调用代理的方式：
## proxy_ip 必须指定安装代理软件的节点 IP
## 本机代理调用则使用 localhost 或 127.0.0.1
proxy_ip=
proxy_port=

#----------------------------------
# 离线模式开关
## offline_mode
## 1 表示开启离线模式
## 0 表示关闭离线模式
## 默认情况下此工具需要联网工作以自动完成下载、校验工作，但考虑到 tomcat 包下载存在的各种网络问题，增加了离线模式。
## 在离线模式下，本工具只会从本地文件夹中读取文件以完成环境准备。
## 因此需要用户自行完成 tomcat 包下载、校验完整性的操作，并将压缩包放到此配置文件所在的同级目录下，千万别改名
## 官网有 zip 和 tar.gz 两种压缩包，两种压缩包的处理离线模式均支持。

## 在线模式默认只下载 tar.gz 的压缩包到 topdir 选项所指定的绝对路径下（构建环境根目录），且一旦下载和校验完成后，会自动复制一份到此配置文件所在同级目录下，不会反向复制
## 之后重复构建的时候就可以启用离线模式跳过联网过程了。
## 注意：离线模式不支持 tomcat_ver 选项的值为 latest 的情况，必须手动指定具体版本号。
offline_mode=1

#----------------------------------
# 日志配置

## 日志保留时长
## log_retention_period_type
## 日志保留时长类型，默认为 weekly，可选值：day、week、month、year，必须小写。
log_retention_period_type=week

## log_retention_period_amount
## 日志保留的类型对应的数量，因 log_retention_period_type 值为 week
## 故此值以周数计数，日志过期时长为 4 周，即一个月的日志量，官方默认52周，即保留最近一年的日志。
log_retention_period_amount=4
